// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: pkg/proto/service.proto

package keyayun_seal_runner_services

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Services service

func NewServicesEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Services service

type ServicesService interface {
	Manifest(ctx context.Context, in *ManifestRequest, opts ...client.CallOption) (*ManifestInfo, error)
	Register(ctx context.Context, in *TokenModel, opts ...client.CallOption) (*TokenResponse, error)
	Update(ctx context.Context, in *TokenModel, opts ...client.CallOption) (*TokenResponse, error)
	UnRegister(ctx context.Context, in *TokenModel, opts ...client.CallOption) (*TokenResponse, error)
	Start(ctx context.Context, in *StartRequest, opts ...client.CallOption) (*StartResponse, error)
	Stop(ctx context.Context, in *StopRequest, opts ...client.CallOption) (*StopResponse, error)
	Stream(ctx context.Context, opts ...client.CallOption) (Services_StreamService, error)
}

type servicesService struct {
	c    client.Client
	name string
}

func NewServicesService(name string, c client.Client) ServicesService {
	return &servicesService{
		c:    c,
		name: name,
	}
}

func (c *servicesService) Manifest(ctx context.Context, in *ManifestRequest, opts ...client.CallOption) (*ManifestInfo, error) {
	req := c.c.NewRequest(c.name, "Services.Manifest", in)
	out := new(ManifestInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesService) Register(ctx context.Context, in *TokenModel, opts ...client.CallOption) (*TokenResponse, error) {
	req := c.c.NewRequest(c.name, "Services.Register", in)
	out := new(TokenResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesService) Update(ctx context.Context, in *TokenModel, opts ...client.CallOption) (*TokenResponse, error) {
	req := c.c.NewRequest(c.name, "Services.Update", in)
	out := new(TokenResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesService) UnRegister(ctx context.Context, in *TokenModel, opts ...client.CallOption) (*TokenResponse, error) {
	req := c.c.NewRequest(c.name, "Services.UnRegister", in)
	out := new(TokenResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesService) Start(ctx context.Context, in *StartRequest, opts ...client.CallOption) (*StartResponse, error) {
	req := c.c.NewRequest(c.name, "Services.Start", in)
	out := new(StartResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesService) Stop(ctx context.Context, in *StopRequest, opts ...client.CallOption) (*StopResponse, error) {
	req := c.c.NewRequest(c.name, "Services.Stop", in)
	out := new(StopResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesService) Stream(ctx context.Context, opts ...client.CallOption) (Services_StreamService, error) {
	req := c.c.NewRequest(c.name, "Services.Stream", &StreamData{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &servicesServiceStream{stream}, nil
}

type Services_StreamService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*StreamData) error
	Recv() (*StreamData, error)
}

type servicesServiceStream struct {
	stream client.Stream
}

func (x *servicesServiceStream) Close() error {
	return x.stream.Close()
}

func (x *servicesServiceStream) Context() context.Context {
	return x.stream.Context()
}

func (x *servicesServiceStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *servicesServiceStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *servicesServiceStream) Send(m *StreamData) error {
	return x.stream.Send(m)
}

func (x *servicesServiceStream) Recv() (*StreamData, error) {
	m := new(StreamData)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Services service

type ServicesHandler interface {
	Manifest(context.Context, *ManifestRequest, *ManifestInfo) error
	Register(context.Context, *TokenModel, *TokenResponse) error
	Update(context.Context, *TokenModel, *TokenResponse) error
	UnRegister(context.Context, *TokenModel, *TokenResponse) error
	Start(context.Context, *StartRequest, *StartResponse) error
	Stop(context.Context, *StopRequest, *StopResponse) error
	Stream(context.Context, Services_StreamStream) error
}

func RegisterServicesHandler(s server.Server, hdlr ServicesHandler, opts ...server.HandlerOption) error {
	type services interface {
		Manifest(ctx context.Context, in *ManifestRequest, out *ManifestInfo) error
		Register(ctx context.Context, in *TokenModel, out *TokenResponse) error
		Update(ctx context.Context, in *TokenModel, out *TokenResponse) error
		UnRegister(ctx context.Context, in *TokenModel, out *TokenResponse) error
		Start(ctx context.Context, in *StartRequest, out *StartResponse) error
		Stop(ctx context.Context, in *StopRequest, out *StopResponse) error
		Stream(ctx context.Context, stream server.Stream) error
	}
	type Services struct {
		services
	}
	h := &servicesHandler{hdlr}
	return s.Handle(s.NewHandler(&Services{h}, opts...))
}

type servicesHandler struct {
	ServicesHandler
}

func (h *servicesHandler) Manifest(ctx context.Context, in *ManifestRequest, out *ManifestInfo) error {
	return h.ServicesHandler.Manifest(ctx, in, out)
}

func (h *servicesHandler) Register(ctx context.Context, in *TokenModel, out *TokenResponse) error {
	return h.ServicesHandler.Register(ctx, in, out)
}

func (h *servicesHandler) Update(ctx context.Context, in *TokenModel, out *TokenResponse) error {
	return h.ServicesHandler.Update(ctx, in, out)
}

func (h *servicesHandler) UnRegister(ctx context.Context, in *TokenModel, out *TokenResponse) error {
	return h.ServicesHandler.UnRegister(ctx, in, out)
}

func (h *servicesHandler) Start(ctx context.Context, in *StartRequest, out *StartResponse) error {
	return h.ServicesHandler.Start(ctx, in, out)
}

func (h *servicesHandler) Stop(ctx context.Context, in *StopRequest, out *StopResponse) error {
	return h.ServicesHandler.Stop(ctx, in, out)
}

func (h *servicesHandler) Stream(ctx context.Context, stream server.Stream) error {
	return h.ServicesHandler.Stream(ctx, &servicesStreamStream{stream})
}

type Services_StreamStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*StreamData) error
	Recv() (*StreamData, error)
}

type servicesStreamStream struct {
	stream server.Stream
}

func (x *servicesStreamStream) Close() error {
	return x.stream.Close()
}

func (x *servicesStreamStream) Context() context.Context {
	return x.stream.Context()
}

func (x *servicesStreamStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *servicesStreamStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *servicesStreamStream) Send(m *StreamData) error {
	return x.stream.Send(m)
}

func (x *servicesStreamStream) Recv() (*StreamData, error) {
	m := new(StreamData)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}
